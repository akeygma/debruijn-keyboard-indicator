   1               		.file	"example.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.startup.main,"ax",@progbits
  11               	.global	main
  13               	main:
  14               	.LFB7:
  15               		.file 1 "example.c"
   1:example.c     **** /* Keyboard example for Teensy USB Development Board
   2:example.c     ****  * http://www.pjrc.com/teensy/usb_keyboard.html
   3:example.c     ****  * Copyright (c) 2008 PJRC.COM, LLC
   4:example.c     ****  * 
   5:example.c     ****  * Permission is hereby granted, free of charge, to any person obtaining a copy
   6:example.c     ****  * of this software and associated documentation files (the "Software"), to deal
   7:example.c     ****  * in the Software without restriction, including without limitation the rights
   8:example.c     ****  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:example.c     ****  * copies of the Software, and to permit persons to whom the Software is
  10:example.c     ****  * furnished to do so, subject to the following conditions:
  11:example.c     ****  * 
  12:example.c     ****  * The above copyright notice and this permission notice shall be included in
  13:example.c     ****  * all copies or substantial portions of the Software.
  14:example.c     ****  * 
  15:example.c     ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:example.c     ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:example.c     ****  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:example.c     ****  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:example.c     ****  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:example.c     ****  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:example.c     ****  * THE SOFTWARE.
  22:example.c     ****  */
  23:example.c     **** 
  24:example.c     **** #include <avr/io.h>
  25:example.c     **** #include <avr/pgmspace.h>
  26:example.c     **** #include <avr/interrupt.h>
  27:example.c     **** #include <util/delay.h>
  28:example.c     **** #include "usb_keyboard.h"
  29:example.c     **** 
  30:example.c     **** #define LED_CONFIG	(DDRD |= (1<<6))
  31:example.c     **** #define LED_OFF		(PORTD &= ~(1<<6))
  32:example.c     **** #define LED_ON		(PORTD |= (1<<6))
  33:example.c     **** #define CPU_PRESCALE(n)	(CLKPR = 0x80, CLKPR = (n))
  34:example.c     **** 
  35:example.c     **** uint8_t number_keys[10]=
  36:example.c     **** 	{KEY_0,KEY_1,KEY_2,KEY_3,KEY_4,KEY_5,KEY_6,KEY_7,KEY_8,KEY_9};
  37:example.c     **** 
  38:example.c     **** uint16_t idle_count=0;
  39:example.c     **** 
  40:example.c     **** int main(void)
  41:example.c     **** {
  16               		.loc 1 41 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  42:example.c     **** 	//uint8_t b, d, mask, i, reset_idle;
  43:example.c     **** 	//uint8_t b_prev=0xFF, d_prev=0xFF;
  44:example.c     **** 
  45:example.c     **** 	// set for 16 MHz clock
  46:example.c     **** 	CPU_PRESCALE(0);
  22               		.loc 1 46 0
  23 0000 80E8      		ldi r24,lo8(-128)
  24 0002 8093 6100 		sts 97,r24
  25 0006 1092 6100 		sts 97,__zero_reg__
  47:example.c     **** 
  48:example.c     ****         LED_CONFIG;
  26               		.loc 1 48 0
  27 000a 569A      		sbi 0xa,6
  49:example.c     ****         LED_OFF;
  28               		.loc 1 49 0
  29 000c 5E98      		cbi 0xb,6
  50:example.c     **** 
  51:example.c     **** 	// Initialize the USB, and then wait for the host to set configuration.
  52:example.c     **** 	// If the Teensy is powered without a PC connected to the USB port,
  53:example.c     **** 	// this will wait forever.
  54:example.c     **** 	usb_init();
  30               		.loc 1 54 0
  31 000e 0E94 0000 		call usb_init
  32               	.LVL0:
  33               	.L2:
  55:example.c     **** 	while (!usb_configured()) /* wait */ ;
  34               		.loc 1 55 0 discriminator 1
  35 0012 0E94 0000 		call usb_configured
  36               	.LVL1:
  37 0016 8823      		tst r24
  38 0018 01F0      		breq .L2
  39               	.LVL2:
  40               	.LBB6:
  41               	.LBB7:
  42               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2453 2014-10-19 08:18:11Z saaadhu $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/avr/include/util/delay.h **** #endif
  41:/usr/avr/include/util/delay.h **** 
  42:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/avr/include/util/delay.h **** #include <math.h>
  45:/usr/avr/include/util/delay.h **** 
  46:/usr/avr/include/util/delay.h **** /** \file */
  47:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/avr/include/util/delay.h ****     \code
  49:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/avr/include/util/delay.h ****     \endcode
  53:/usr/avr/include/util/delay.h **** 
  54:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/avr/include/util/delay.h ****     used.
  58:/usr/avr/include/util/delay.h **** 
  59:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/avr/include/util/delay.h **** 
  68:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/avr/include/util/delay.h **** 
  77:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/avr/include/util/delay.h **** 
  81:/usr/avr/include/util/delay.h **** */
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  85:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  86:/usr/avr/include/util/delay.h **** #endif
  87:/usr/avr/include/util/delay.h **** 
  88:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/avr/include/util/delay.h **** #endif
  93:/usr/avr/include/util/delay.h **** 
  94:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/avr/include/util/delay.h **** #endif
  97:/usr/avr/include/util/delay.h **** 
  98:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/avr/include/util/delay.h **** #endif
 103:/usr/avr/include/util/delay.h **** 
 104:/usr/avr/include/util/delay.h **** /**
 105:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/avr/include/util/delay.h **** 
 107:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/avr/include/util/delay.h **** 
 109:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/avr/include/util/delay.h **** 
 112:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/avr/include/util/delay.h **** 
 114:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/avr/include/util/delay.h **** 
 120:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/avr/include/util/delay.h **** 
 125:/usr/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/avr/include/util/delay.h **** 
 132:/usr/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/avr/include/util/delay.h **** 
 140:/usr/avr/include/util/delay.h ****  */
 141:/usr/avr/include/util/delay.h **** void
 142:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/avr/include/util/delay.h **** {
 144:/usr/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/avr/include/util/delay.h **** 
 155:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/avr/include/util/delay.h **** 
 158:/usr/avr/include/util/delay.h **** 	#else
 159:/usr/avr/include/util/delay.h **** 		//round up by default
 160:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/avr/include/util/delay.h **** 	#endif
 162:/usr/avr/include/util/delay.h **** 
 163:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  43               		.loc 2 163 0
  44 001a 2FEF      		ldi r18,lo8(3199999)
  45 001c 83ED      		ldi r24,hi8(3199999)
  46 001e 90E3      		ldi r25,hlo8(3199999)
  47 0020 2150      	1:	subi r18,1
  48 0022 8040      		sbci r24,0
  49 0024 9040      		sbci r25,0
  50 0026 01F4      		brne 1b
  51 0028 00C0      		rjmp .
  52 002a 0000      		nop
  53               	.LBE7:
  54               	.LBE6:
  56:example.c     **** 
  57:example.c     **** 	// Wait an extra second for the PC's operating system to load drivers
  58:example.c     **** 	// and do whatever it does to actually be ready for input
  59:example.c     **** 	_delay_ms(1000);
  60:example.c     **** 
  61:example.c     **** 	// Configure timer 0 to generate a timer overflow interrupt every
  62:example.c     **** 	// 256*1024 clock cycles, or approx 61 Hz when using 16 MHz clock
  63:example.c     **** 	// This demonstrates how to use interrupts to implement a simple
  64:example.c     **** 	// inactivity timeout.
  65:example.c     **** 	TCCR0A = 0x00;
  55               		.loc 1 65 0
  56 002c 14BC      		out 0x24,__zero_reg__
  66:example.c     **** 	TCCR0B = 0x05;
  57               		.loc 1 66 0
  58 002e 85E0      		ldi r24,lo8(5)
  59 0030 85BD      		out 0x25,r24
  67:example.c     **** 	TIMSK0 = (1<<TOIE0);
  60               		.loc 1 67 0
  61 0032 81E0      		ldi r24,lo8(1)
  62 0034 8093 6E00 		sts 110,r24
  63               	.L5:
  68:example.c     **** 
  69:example.c     **** 	while (1) {
  70:example.c     ****                 if ((keyboard_leds & 0x4) ==  0) LED_OFF;
  64               		.loc 1 70 0
  65 0038 8091 0000 		lds r24,keyboard_leds
  66 003c 82FD      		sbrc r24,2
  67 003e 00C0      		rjmp .L3
  68               		.loc 1 70 0 is_stmt 0 discriminator 1
  69 0040 5E98      		cbi 0xb,6
  70 0042 00C0      		rjmp .L4
  71               	.L3:
  71:example.c     ****                 else LED_ON;
  72               		.loc 1 71 0 is_stmt 1
  73 0044 5E9A      		sbi 0xb,6
  74               	.L4:
  75               	.LVL3:
  76               	.LBB8:
  77               	.LBB9:
  78               		.loc 2 163 0
  79 0046 8FE3      		ldi r24,lo8(7999)
  80 0048 9FE1      		ldi r25,hi8(7999)
  81 004a 0197      	1:	sbiw r24,1
  82 004c 01F4      		brne 1b
  83 004e 00C0      		rjmp .
  84 0050 0000      		nop
  85 0052 00C0      		rjmp .L5
  86               	.LBE9:
  87               	.LBE8:
  88               		.cfi_endproc
  89               	.LFE7:
  91               		.section	.text.__vector_23,"ax",@progbits
  92               	.global	__vector_23
  94               	__vector_23:
  95               	.LFB8:
  72:example.c     **** 		_delay_ms(2);
  73:example.c     **** 	}
  74:example.c     **** }
  75:example.c     **** 
  76:example.c     **** // This interrupt routine is run approx 61 times per second.
  77:example.c     **** // A very simple inactivity timeout is implemented, where we
  78:example.c     **** // will send a space character.
  79:example.c     **** ISR(TIMER0_OVF_vect)
  80:example.c     **** {
  96               		.loc 1 80 0
  97               		.cfi_startproc
  98 0000 1F92      		push r1
  99               	.LCFI0:
 100               		.cfi_def_cfa_offset 3
 101               		.cfi_offset 1, -2
 102 0002 0F92      		push r0
 103               	.LCFI1:
 104               		.cfi_def_cfa_offset 4
 105               		.cfi_offset 0, -3
 106 0004 0FB6      		in r0,__SREG__
 107 0006 0F92      		push r0
 108 0008 1124      		clr __zero_reg__
 109               	/* prologue: Signal */
 110               	/* frame size = 0 */
 111               	/* stack size = 3 */
 112               	.L__stack_usage = 3
 113               	/* epilogue start */
  81:example.c     **** }
 114               		.loc 1 81 0
 115 000a 0F90      		pop r0
 116 000c 0FBE      		out __SREG__,r0
 117 000e 0F90      		pop r0
 118 0010 1F90      		pop r1
 119 0012 1895      		reti
 120               		.cfi_endproc
 121               	.LFE8:
 123               	.global	idle_count
 124               		.section .bss
 127               	idle_count:
 128 0000 0000      		.zero	2
 129               	.global	number_keys
 130               		.data
 133               	number_keys:
 134 0000 27        		.byte	39
 135 0001 1E        		.byte	30
 136 0002 1F        		.byte	31
 137 0003 20        		.byte	32
 138 0004 21        		.byte	33
 139 0005 22        		.byte	34
 140 0006 23        		.byte	35
 141 0007 24        		.byte	36
 142 0008 25        		.byte	37
 143 0009 26        		.byte	38
 144               		.text
 145               	.Letext0:
 146               		.file 3 "/usr/avr/include/stdint.h"
 147               		.file 4 "usb_keyboard.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 example.c
     /tmp/cc0z8WBw.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc0z8WBw.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc0z8WBw.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc0z8WBw.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc0z8WBw.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc0z8WBw.s:13     .text.startup.main:0000000000000000 main
     /tmp/cc0z8WBw.s:94     .text.__vector_23:0000000000000000 __vector_23
     /tmp/cc0z8WBw.s:127    .bss:0000000000000000 idle_count
     /tmp/cc0z8WBw.s:133    .data:0000000000000000 number_keys

UNDEFINED SYMBOLS
usb_init
usb_configured
keyboard_leds
__do_copy_data
__do_clear_bss
